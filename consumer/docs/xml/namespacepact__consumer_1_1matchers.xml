<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepact__consumer_1_1matchers" kind="namespace" language="C++">
    <compoundname>pact_consumer::matchers</compoundname>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DateMatcher" prot="public">pact_consumer::matchers::DateMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DateTimeMatcher" prot="public">pact_consumer::matchers::DateTimeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DecimalMatcher" prot="public">pact_consumer::matchers::DecimalMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1EachlikeMatcher" prot="public">pact_consumer::matchers::EachlikeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1EqualsMatcher" prot="public">pact_consumer::matchers::EqualsMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1HexadecimalMatcher" prot="public">pact_consumer::matchers::HexadecimalMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IMatcher" prot="public">pact_consumer::matchers::IMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IncludesMatcher" prot="public">pact_consumer::matchers::IncludesMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IntegerMatcher" prot="public">pact_consumer::matchers::IntegerMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IPAddressMatcher" prot="public">pact_consumer::matchers::IPAddressMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1NullMatcher" prot="public">pact_consumer::matchers::NullMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1NumberMatcher" prot="public">pact_consumer::matchers::NumberMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1ObjectMatcher" prot="public">pact_consumer::matchers::ObjectMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1RegexMatcher" prot="public">pact_consumer::matchers::RegexMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1TimeMatcher" prot="public">pact_consumer::matchers::TimeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1TypeMatcher" prot="public">pact_consumer::matchers::TypeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1UrlMatcher" prot="public">pact_consumer::matchers::UrlMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1UuidMatcher" prot="public">pact_consumer::matchers::UuidMatcher</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a48c1224bc9f3dcadae973c074cd68407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Object</definition>
        <argsstring>(const std::unordered_map&lt; std::string, IMatcher::Ptr &gt; fields)</argsstring>
        <name>Object</name>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a JSON object (map of string fields) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="7" column="17" bodyfile="src/matchers.cpp" bodystart="7" bodyend="9" declfile="include/matchers.h" declline="220" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a4857b8996e54c5dc7e8cb5a814d595dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>(long value)</argsstring>
        <name>Integer</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="11" column="17" bodyfile="src/matchers.cpp" bodystart="11" bodyend="13" declfile="include/matchers.h" declline="225" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab3eba43ca56c78c36b3dda251a0e1faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>(int value)</argsstring>
        <name>Integer</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="15" column="17" bodyfile="src/matchers.cpp" bodystart="15" bodyend="17" declfile="include/matchers.h" declline="230" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa97242d2caf82ab8b512686962c9945e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>()</argsstring>
        <name>Integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). A random example value will be generated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="19" column="17" bodyfile="src/matchers.cpp" bodystart="19" bodyend="21" declfile="include/matchers.h" declline="235" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a3d266fa3fc12cec88e0a23a50ba4219d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(long value)</argsstring>
        <name>Like</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="23" column="17" bodyfile="src/matchers.cpp" bodystart="23" bodyend="25" declfile="include/matchers.h" declline="240" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a83ea48364b267e159a6e82802bd8300c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(int value)</argsstring>
        <name>Like</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="27" column="17" bodyfile="src/matchers.cpp" bodystart="27" bodyend="29" declfile="include/matchers.h" declline="244" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a6ec3cd8bb6b06b62522886ff2c73d256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(double value)</argsstring>
        <name>Like</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="31" column="17" bodyfile="src/matchers.cpp" bodystart="31" bodyend="33" declfile="include/matchers.h" declline="248" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ad00d5ad3bca29d5452724a845a667b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(std::string value)</argsstring>
        <name>Like</name>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="35" column="17" bodyfile="src/matchers.cpp" bodystart="35" bodyend="37" declfile="include/matchers.h" declline="252" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa07b63501393ef2a1ee4458f6558d8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(const char *value)</argsstring>
        <name>Like</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="39" column="17" bodyfile="src/matchers.cpp" bodystart="39" bodyend="41" declfile="include/matchers.h" declline="256" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a6dd0effb347f57ad878e230082e1c546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(bool value)</argsstring>
        <name>Like</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="43" column="17" bodyfile="src/matchers.cpp" bodystart="43" bodyend="45" declfile="include/matchers.h" declline="260" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa85192c01eb593ba5a5c5312e98de4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::DateTime</definition>
        <argsstring>(std::string format, std::string example)</argsstring>
        <name>DateTime</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided datetime format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="47" column="17" bodyfile="src/matchers.cpp" bodystart="47" bodyend="49" declfile="include/matchers.h" declline="267" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af4f8c9981bf2c9728c2402cf7106de8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::DateTime</definition>
        <argsstring>(std::string format)</argsstring>
        <name>DateTime</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided datetime format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="51" column="17" bodyfile="src/matchers.cpp" bodystart="51" bodyend="53" declfile="include/matchers.h" declline="273" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1acc1c453f71347fc736f2f95fe0473783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Date</definition>
        <argsstring>(std::string format, std::string example)</argsstring>
        <name>Date</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided date format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="55" column="17" bodyfile="src/matchers.cpp" bodystart="55" bodyend="57" declfile="include/matchers.h" declline="280" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a396cfddf79276bc2423fbd9a9744b9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Date</definition>
        <argsstring>(std::string format)</argsstring>
        <name>Date</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided date format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="59" column="17" bodyfile="src/matchers.cpp" bodystart="59" bodyend="61" declfile="include/matchers.h" declline="286" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a407967a1a434eeb4c09d1398cf4487a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Time</definition>
        <argsstring>(std::string format, std::string example)</argsstring>
        <name>Time</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided time format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="63" column="17" bodyfile="src/matchers.cpp" bodystart="63" bodyend="65" declfile="include/matchers.h" declline="293" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8afbf69f0f1c8e941bcb7460c1f4a56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Time</definition>
        <argsstring>(std::string format)</argsstring>
        <name>Time</name>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided time format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="67" column="17" bodyfile="src/matchers.cpp" bodystart="67" bodyend="69" declfile="include/matchers.h" declline="299" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a4ab5cbf4a1e1707ecec14ab691432f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Matching</definition>
        <argsstring>(std::string regex, std::string example)</argsstring>
        <name>Matching</name>
        <param>
          <type>std::string</type>
          <declname>regex</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the regular expression </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="71" column="17" bodyfile="src/matchers.cpp" bodystart="71" bodyend="73" declfile="include/matchers.h" declline="304" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a29c5fe3515e380dd79d52a2f31bfea3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Matching</definition>
        <argsstring>(std::string regex)</argsstring>
        <name>Matching</name>
        <param>
          <type>std::string</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the regular expression. Random values will be generated for the examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="75" column="17" bodyfile="src/matchers.cpp" bodystart="75" bodyend="77" declfile="include/matchers.h" declline="309" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a373d5b4e09f56d4245ecafe400044bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EachLike</definition>
        <argsstring>(const IMatcher::Ptr obj)</argsstring>
        <name>EachLike</name>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values where each item in the array must match the provided template. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="79" column="17" bodyfile="src/matchers.cpp" bodystart="79" bodyend="81" declfile="include/matchers.h" declline="314" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a301d266f66d722e7a76bc8301c211991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EachLike</definition>
        <argsstring>(int examples, const IMatcher::Ptr obj)</argsstring>
        <name>EachLike</name>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values where each item in the array must match the provided template. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of example values to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="83" column="17" bodyfile="src/matchers.cpp" bodystart="83" bodyend="85" declfile="include/matchers.h" declline="320" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a25f4cc8d8a3afadfd5b4c5245746ebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtLeastOneLike</definition>
        <argsstring>(const IMatcher::Ptr obj)</argsstring>
        <name>AtLeastOneLike</name>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values that must have at least one value and each item in the array must match the provided template. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="87" column="17" bodyfile="src/matchers.cpp" bodystart="87" bodyend="89" declfile="include/matchers.h" declline="325" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8f530d7b5f9122e1c6b137f1e3f62858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtLeastOneLike</definition>
        <argsstring>(int examples, const IMatcher::Ptr obj)</argsstring>
        <name>AtLeastOneLike</name>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values that must have at least one value and each item in the array must match the provided template. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of example values to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="91" column="17" bodyfile="src/matchers.cpp" bodystart="91" bodyend="93" declfile="include/matchers.h" declline="331" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a070f84d4e4e2f948f14dda6c15e48ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::HexValue</definition>
        <argsstring>(const std::string example)</argsstring>
        <name>HexValue</name>
        <param>
          <type>const std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a hexadecimal value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="95" column="17" bodyfile="src/matchers.cpp" bodystart="95" bodyend="97" declfile="include/matchers.h" declline="337" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a627f4d81bff337fe7b7fb87b7ae35414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::HexValue</definition>
        <argsstring>()</argsstring>
        <name>HexValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a hexadecimal value. Random examples will be generated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="99" column="17" bodyfile="src/matchers.cpp" bodystart="99" bodyend="101" declfile="include/matchers.h" declline="342" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a198b0154d9509cbcd3a65b755107bd58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IPAddress</definition>
        <argsstring>(const std::string example)</argsstring>
        <name>IPAddress</name>
        <param>
          <type>const std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match an IP Address <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="103" column="17" bodyfile="src/matchers.cpp" bodystart="103" bodyend="105" declfile="include/matchers.h" declline="348" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a2a07a602dd54b0ce820af22484987bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IPAddress</definition>
        <argsstring>()</argsstring>
        <name>IPAddress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match an IP Address. Will use 127.0.0.1 for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="107" column="17" bodyfile="src/matchers.cpp" bodystart="107" bodyend="109" declfile="include/matchers.h" declline="353" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a5b09c8fb2e37ca8c610bb3df63b65bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(int example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>int</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="111" column="17" bodyfile="src/matchers.cpp" bodystart="111" bodyend="113" declfile="include/matchers.h" declline="359" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a02ab80cff207fe8f808e738e4085e00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(long example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>long</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="115" column="17" bodyfile="src/matchers.cpp" bodystart="115" bodyend="117" declfile="include/matchers.h" declline="365" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a492350f247cc0ffe0651f5c6327e92b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(float example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>float</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="119" column="17" bodyfile="src/matchers.cpp" bodystart="119" bodyend="121" declfile="include/matchers.h" declline="371" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a346d30c12586a914b26dd3ca2c9bd879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(double example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>double</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="123" column="17" bodyfile="src/matchers.cpp" bodystart="123" bodyend="125" declfile="include/matchers.h" declline="377" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af805123c41e4789af759efa739772286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>()</argsstring>
        <name>Numeric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. Random decimal values will be generated for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="127" column="17" bodyfile="src/matchers.cpp" bodystart="127" bodyend="129" declfile="include/matchers.h" declline="382" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1afcc8d7fa449dc781049af11353f63680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>(float example)</argsstring>
        <name>Decimal</name>
        <param>
          <type>float</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="131" column="17" bodyfile="src/matchers.cpp" bodystart="131" bodyend="133" declfile="include/matchers.h" declline="388" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0033957c079590c59da96e95f2f89b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>(double example)</argsstring>
        <name>Decimal</name>
        <param>
          <type>double</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="135" column="17" bodyfile="src/matchers.cpp" bodystart="135" bodyend="137" declfile="include/matchers.h" declline="394" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a9b2546fe1ad56f3434e7028a3499bfd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>()</argsstring>
        <name>Decimal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point). Random values will be generated for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="139" column="17" bodyfile="src/matchers.cpp" bodystart="139" bodyend="141" declfile="include/matchers.h" declline="400" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a9fa0a81706a15dcb89a49f19376c5242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Uuid</definition>
        <argsstring>(const std::string example)</argsstring>
        <name>Uuid</name>
        <param>
          <type>const std::string</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a universally unique identifier (UUID) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>value to use for examples </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="143" column="17" bodyfile="src/matchers.cpp" bodystart="143" bodyend="145" declfile="include/matchers.h" declline="406" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aab0a2b88f2fd1bb46fe26e5642d61c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Uuid</definition>
        <argsstring>()</argsstring>
        <name>Uuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a universally unique identifier (UUID). Random values will be used for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="147" column="17" bodyfile="src/matchers.cpp" bodystart="147" bodyend="149" declfile="include/matchers.h" declline="411" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8ad798ea440fcad6ee7f0d6877880cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtMostLike</definition>
        <argsstring>(int max, const IMatcher::Ptr obj)</argsstring>
        <name>AtMostLike</name>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="151" column="17" bodyfile="src/matchers.cpp" bodystart="151" bodyend="153" declfile="include/matchers.h" declline="417" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1acf9636daddf7702ee686dbc3768f73ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtMostLike</definition>
        <argsstring>(int max, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>AtMostLike</name>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="155" column="17" bodyfile="src/matchers.cpp" bodystart="155" bodyend="157" declfile="include/matchers.h" declline="424" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0d610018da0d7cd5476f36abe0082fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::MinArrayLike</definition>
        <argsstring>(int min, const IMatcher::Ptr obj)</argsstring>
        <name>MinArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="159" column="17" bodyfile="src/matchers.cpp" bodystart="159" bodyend="161" declfile="include/matchers.h" declline="430" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a057f106b274725ca06e1335c0c9da45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::MinArrayLike</definition>
        <argsstring>(int min, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>MinArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="163" column="17" bodyfile="src/matchers.cpp" bodystart="163" bodyend="165" declfile="include/matchers.h" declline="437" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa56a8e2c0bf49cfb794738471b8a5be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::ConstrainedArrayLike</definition>
        <argsstring>(int min, int max, const IMatcher::Ptr obj)</argsstring>
        <name>ConstrainedArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum and maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="167" column="17" bodyfile="src/matchers.cpp" bodystart="167" bodyend="169" declfile="include/matchers.h" declline="444" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8a572f179ab00138064e74ae28bde134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::ConstrainedArrayLike</definition>
        <argsstring>(int min, int max, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>ConstrainedArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum and maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="171" column="17" bodyfile="src/matchers.cpp" bodystart="171" bodyend="173" declfile="include/matchers.h" declline="452" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1afe9e52d692ad1abe7727f08f0dc9a4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(int value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="175" column="17" bodyfile="src/matchers.cpp" bodystart="175" bodyend="177" declfile="include/matchers.h" declline="458" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1abdfa9cb6995ab04d829ff6a843d4c69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(long value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="179" column="17" bodyfile="src/matchers.cpp" bodystart="179" bodyend="181" declfile="include/matchers.h" declline="464" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa9e1890dd24fa778e0db53f52df0efb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(float value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="183" column="17" bodyfile="src/matchers.cpp" bodystart="183" bodyend="185" declfile="include/matchers.h" declline="470" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab21bb806b113cd85560dd4be1b6badca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(double value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="187" column="17" bodyfile="src/matchers.cpp" bodystart="187" bodyend="189" declfile="include/matchers.h" declline="476" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a7ce10198f8601f4f6941593ff516f6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(std::string value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="191" column="17" bodyfile="src/matchers.cpp" bodystart="191" bodyend="193" declfile="include/matchers.h" declline="482" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a1931ffa4a97f768d81bcebf9406592ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(bool value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="195" column="17" bodyfile="src/matchers.cpp" bodystart="195" bodyend="197" declfile="include/matchers.h" declline="488" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af77644d3d7c23c3d776483f5e02aad89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IncludesStr</definition>
        <argsstring>(std::string value)</argsstring>
        <name>IncludesStr</name>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches if the string value contains the given value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>String value that must be present </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="199" column="17" bodyfile="src/matchers.cpp" bodystart="199" bodyend="201" declfile="include/matchers.h" declline="494" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0713635f17e43e8f4a4973cdb50a7008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::NullValue</definition>
        <argsstring>()</argsstring>
        <name>NullValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches a JSON null value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="203" column="17" bodyfile="src/matchers.cpp" bodystart="203" bodyend="205" declfile="include/matchers.h" declline="499" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a86b9a0ab8b9beb9fc26964b344bdad28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Url</definition>
        <argsstring>(std::string basePath, std::vector&lt; IMatcher::Ptr &gt; pathFragments)</argsstring>
        <name>Url</name>
        <param>
          <type>std::string</type>
          <declname>basePath</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt;</type>
          <declname>pathFragments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches a URL composed of a base path and a list of path fragments <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>basePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Base path of the URL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathFragments</parametername>
</parameternamelist>
<parameterdescription>
<para>list of path fragments, can be regular expressions. Only the Equals and Matching matchers will work. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="207" column="17" bodyfile="src/matchers.cpp" bodystart="207" bodyend="209" declfile="include/matchers.h" declline="506" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/matchers.cpp" line="5" column="33"/>
  </compounddef>
</doxygen>
